// Advanced Multi-Language Integration Demo
// Showcases real-world cross-language development with Utopia

println("ðŸš€ Advanced Multi-Language Integration Demo")
println("============================================")

// Python: Data Science and Machine Learning
@lang python {
    import numpy as np
    import json
    
    def analyze_data(data):
        arr = np.array(data)
        return {
            "mean": float(np.mean(arr)),
            "std": float(np.std(arr)),
            "max": float(np.max(arr)),
            "min": float(np.min(arr))
        }
    
    def process_text(text):
        words = text.lower().split()
        return {
            "word_count": len(words),
            "unique_words": len(set(words)),
            "longest_word": max(words, key=len) if words else ""
        }
    
    def fibonacci_optimized(n):
        if n <= 1:
            return n
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
}

// JavaScript: Web APIs and Real-time Processing
@lang javascript {
    function processUserData(userData) {
        return {
            id: userData.id || Math.random().toString(36),
            name: userData.name.trim().toLowerCase(),
            email: userData.email.toLowerCase(),
            timestamp: new Date().toISOString(),
            hash: btoa(userData.name + userData.email)
        };
    }
    
    function calculateMetrics(numbers) {
        const sum = numbers.reduce((a, b) => a + b, 0);
        return {
            sum: sum,
            average: sum / numbers.length,
            squares: numbers.map(n => n * n),
            evens: numbers.filter(n => n % 2 === 0)
        };
    }
    
    function formatResponse(data, status) {
        return JSON.stringify({
            success: status === 'ok',
            data: data,
            timestamp: Date.now(),
            version: '1.0.0'
        });
    }
}

// Rust: High-performance computation
@lang rust {
    fn prime_sieve(limit: usize) -> Vec<usize> {
        let mut is_prime = vec![true; limit + 1];
        is_prime[0] = false;
        if limit > 0 { is_prime[1] = false; }
        
        for i in 2..=((limit as f64).sqrt() as usize) {
            if is_prime[i] {
                for j in ((i * i)..=limit).step_by(i) {
                    is_prime[j] = false;
                }
            }
        }
        
        (2..=limit).filter(|&i| is_prime[i]).collect()
    }
    
    fn matrix_multiply(a: Vec<Vec<i32>>, b: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        let rows_a = a.len();
        let cols_a = a[0].len();
        let cols_b = b[0].len();
        
        let mut result = vec![vec![0; cols_b]; rows_a];
        
        for i in 0..rows_a {
            for j in 0..cols_b {
                for k in 0..cols_a {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        result
    }
}

// Go: Concurrent processing and microservices
@lang go {
    package main
    
    import (
        "encoding/json"
        "fmt"
        "sort"
        "strings"
        "time"
    )
    
    func ProcessConcurrently(data []int, workers int) map[string]interface{} {
        results := make(chan int, len(data))
        
        // Simulate concurrent processing
        for _, val := range data {
            go func(v int) {
                // Simulate some processing time
                time.Sleep(time.Millisecond * 10)
                results <- v * v
            }(val)
        }
        
        processed := make([]int, 0, len(data))
        for i := 0; i < len(data); i++ {
            processed = append(processed, <-results)
        }
        
        sort.Ints(processed)
        
        return map[string]interface{}{
            "processed": processed,
            "count": len(processed),
            "sum": sum(processed),
        }
    }
    
    func sum(nums []int) int {
        total := 0
        for _, num := range nums {
            total += num
        }
        return total
    }
}

// Main execution: Orchestrate cross-language operations
println("Starting cross-language data processing pipeline...")

// Step 1: Python data analysis
let sample_data = [10, 25, 30, 45, 50, 65, 70, 85, 90, 95]
let analysis_result = python::analyze_data(sample_data)
println("Python Analysis Result:", analysis_result)

// Step 2: JavaScript user data processing
let user_data = {
    id: "user123",
    name: "  John Doe  ",
    email: "JOHN.DOE@EXAMPLE.COM"
}
let processed_user = javascript::processUserData(user_data)
println("JavaScript Processed User:", processed_user)

// Step 3: Cross-language integration
let metrics = javascript::calculateMetrics(sample_data)
println("JavaScript Metrics:", metrics)

// Step 4: Python text processing
let sample_text = "The quick brown fox jumps over the lazy dog"
let text_analysis = python::process_text(sample_text)
println("Python Text Analysis:", text_analysis)

// Step 5: Performance comparison
let fib_result = python::fibonacci_optimized(30)
println("Python Fibonacci(30):", fib_result)

// Step 6: Format final response
let final_response = javascript::formatResponse({
    analysis: analysis_result,
    user: processed_user,
    metrics: metrics,
    text: text_analysis,
    fibonacci: fib_result
}, "ok")

println("Final Integrated Response:")
println(final_response)

println("âœ… Advanced multi-language integration complete!")
println("ðŸŽ¯ Demonstrated: Python â†” JavaScript â†” Rust â†” Go integration")
println("ðŸš€ Utopia enables seamless multi-language development!") 