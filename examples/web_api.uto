// Web API 示例
// 演示在 Web 应用中使用多语言功能

@lang python
from datetime import datetime
import hashlib
import secrets

def generate_session_token() -> str:
    """生成安全的会话令牌"""
    return secrets.token_urlsafe(32)

def hash_password(password: str, salt: str) -> str:
    """使用盐值哈希密码"""
    combined = password + salt
    return hashlib.sha256(combined.encode()).hexdigest()

def validate_email(email: str) -> bool:
    """验证邮箱格式"""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def get_timestamp() -> str:
    """获取当前时间戳"""
    return datetime.now().isoformat()

@lang javascript
class ApiResponse {
    /**
     * API 响应类
     */
    constructor(success, data = null, message = '') {
        this.success = success;
        this.data = data;
        this.message = message;
        this.timestamp = new Date().toISOString();
    }
    
    toJSON() {
        return {
            success: this.success,
            data: this.data,
            message: this.message,
            timestamp: this.timestamp
        };
    }
}

function validateRequest(req) {
    /**
     * 验证请求数据
     */
    const required = ['email', 'password'];
    const missing = required.filter(field => !req[field]);
    
    if (missing.length > 0) {
        return new ApiResponse(false, null, `缺少必需字段: ${missing.join(', ')}`);
    }
    
    return new ApiResponse(true);
}

function formatUserData(userData) {
    /**
     * 格式化用户数据
     */
    return {
        id: userData.id,
        email: userData.email,
        name: userData.name,
        created_at: userData.created_at,
        last_login: userData.last_login
    };
}

@lang c
#include <time.h>
#include <string.h>

int calculate_password_strength(const char* password) {
    /**
     * 计算密码强度分数
     */
    int score = 0;
    int length = strlen(password);
    
    // 长度评分
    if (length >= 8) score += 2;
    if (length >= 12) score += 1;
    
    // 字符类型评分
    int has_lower = 0, has_upper = 0, has_digit = 0, has_special = 0;
    
    for (int i = 0; i < length; i++) {
        char c = password[i];
        if (c >= 'a' && c <= 'z') has_lower = 1;
        else if (c >= 'A' && c <= 'Z') has_upper = 1;
        else if (c >= '0' && c <= '9') has_digit = 1;
        else has_special = 1;
    }
    
    score += has_lower + has_upper + has_digit + has_special;
    
    return score;
}

long get_current_timestamp() {
    /**
     * 获取当前时间戳（秒）
     */
    return time(NULL);
}

// API 端点实现
@lang javascript

function registerUser(requestData) {
    /**
     * 用户注册 API
     */
    // 验证请求数据
    let validation = validateRequest(requestData);
    if (!validation.success) {
        return validation;
    }
    
    // 使用 Python 验证邮箱
    if (!py::validate_email(requestData.email)) {
        return new ApiResponse(false, null, '邮箱格式无效');
    }
    
    // 使用 C 检查密码强度
    let passwordStrength = c::calculate_password_strength(requestData.password);
    if (passwordStrength < 4) {
        return new ApiResponse(false, null, '密码强度不足，需要包含大小写字母、数字和特殊字符');
    }
    
    // 生成安全令牌和密码哈希
    let sessionToken = py::generate_session_token();
    let salt = py::generate_session_token().substring(0, 16);
    let passwordHash = py::hash_password(requestData.password, salt);
    
    // 模拟用户数据
    let userData = {
        id: Math.floor(Math.random() * 10000),
        email: requestData.email,
        name: requestData.name || '用户',
        password_hash: passwordHash,
        salt: salt,
        session_token: sessionToken,
        created_at: py::get_timestamp(),
        last_login: null
    };
    
    // 返回格式化的用户数据（不包含敏感信息）
    let safeUserData = formatUserData(userData);
    safeUserData.session_token = sessionToken;
    
    return new ApiResponse(true, safeUserData, '注册成功');
}

function loginUser(requestData) {
    /**
     * 用户登录 API
     */
    // 验证请求数据
    let validation = validateRequest(requestData);
    if (!validation.success) {
        return validation;
    }
    
    // 模拟从数据库获取用户数据
    let storedUser = {
        email: requestData.email,
        salt: 'mock_salt_123456',
        password_hash: py::hash_password(requestData.password, 'mock_salt_123456')
    };
    
    // 验证密码
    let inputHash = py::hash_password(requestData.password, storedUser.salt);
    if (inputHash !== storedUser.password_hash) {
        return new ApiResponse(false, null, '邮箱或密码错误');
    }
    
    // 生成新的会话令牌
    let sessionToken = py::generate_session_token();
    
    // 更新最后登录时间
    let userData = {
        id: 12345,
        email: requestData.email,
        name: '测试用户',
        created_at: '2024-01-01T00:00:00Z',
        last_login: py::get_timestamp()
    };
    
    let safeUserData = formatUserData(userData);
    safeUserData.session_token = sessionToken;
    
    return new ApiResponse(true, safeUserData, '登录成功');
}

// 测试 API
let registerRequest = {
    email: 'user@example.com',
    password: 'SecurePass123!',
    name: '张三'
};

let loginRequest = {
    email: 'user@example.com',
    password: 'SecurePass123!'
};

console.log('=== 用户注册测试 ===');
let registerResult = registerUser(registerRequest);
console.log(JSON.stringify(registerResult.toJSON(), null, 2));

console.log('\n=== 用户登录测试 ===');
let loginResult = loginUser(loginRequest);
console.log(JSON.stringify(loginResult.toJSON(), null, 2)); 